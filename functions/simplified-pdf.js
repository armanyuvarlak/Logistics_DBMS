/**
 * Simplified PDF generation function for testing
 */

const functions = require("firebase-functions/v2");
const admin = require("firebase-admin");
const PDFDocument = require("pdfkit");
const logger = require("firebase-functions/logger");

// We don't initialize Firebase Admin here as it's already initialized in index.js

/**
 * Generates a simple PDF without complex formatting
 */
exports.generateSimplePdf = functions.https.onCall(async (data, context) => {
  try {
    logger.info('Starting PDF generation with simplified function. Data:', data);
    logger.info('Auth context:', {
      auth: context.auth ? 'present' : 'missing',
      uid: context.auth ? context.auth.uid : 'none',
      token: context.auth && context.auth.token ? 'present' : 'missing',
      authenticated: !!context.auth
    });
    
    // Security check - ensure user is authenticated
    if (!context.auth) {
      logger.error('Authentication failed: No auth context provided');
      throw new functions.https.HttpsError(
        "unauthenticated",
        "The function must be called while authenticated. Please ensure you're logged in and your token is valid."
      );
    }

    // Log detailed auth info for debugging
    const email = context.auth.token && context.auth.token.email ? context.auth.token.email : 'no email in token';
    const emailVerified = context.auth.token && context.auth.token.email_verified;
    const provider = context.auth.token && context.auth.token.firebase && context.auth.token.firebase.sign_in_provider;
    
    logger.info('Authentication successful. User details:', {
      uid: context.auth.uid,
      email: email,
      emailVerified: emailVerified,
      provider: provider
    });

    // Validate input - super basic
    if (!data || !data.filename) {
      throw new functions.https.HttpsError(
        "invalid-argument",
        "Missing required parameters: filename is required"
      );
    }

    const folder = data.folder || 'test';
    const filename = data.filename;
    const testContent = data.content || "This is a test PDF document";
    
    // Create a simple PDF
    const doc = new PDFDocument({ 
      margin: 50,
      size: 'A4'
    });
    
    // Collect PDF chunks
    const chunks = [];
    doc.on('data', chunk => chunks.push(chunk));
    
    // Create a very simple PDF
    doc.fontSize(25)
      .text('Test PDF Document', {
        align: 'center'
      });
      
    doc.moveDown();
    doc.fontSize(14)
      .text(testContent);
      
    doc.moveDown();
    doc.fontSize(12)
      .text(`Generated at: ${new Date().toISOString()}`);
    
    doc.moveDown();
    doc.fontSize(10)
      .text(`Generated by: ${context.auth.token && context.auth.token.email ? context.auth.token.email : context.auth.uid}`);
      
    // Finalize the PDF
    doc.end();
    
    // Wait for the PDF generation to complete
    const pdfBuffer = await new Promise((resolve, reject) => {
      doc.on('end', () => {
        resolve(Buffer.concat(chunks));
      });
      
      doc.on('error', (err) => {
        reject(err);
      });
    });
    
    // Define the storage path
    const filePath = `${folder}/${filename}.pdf`;
    logger.info(`PDF generated, uploading to: ${filePath}`);
    
    try {
      // Upload to Firebase Storage
      const bucket = admin.storage().bucket();
      const file = bucket.file(filePath);
      
      await file.save(pdfBuffer, {
        metadata: {
          contentType: 'application/pdf',
          metadata: {
            createdBy: context.auth.uid,
            createdAt: new Date().toISOString()
          }
        }
      });
      
      logger.info('PDF uploaded successfully');
      
      // Get download URL
      const [url] = await file.getSignedUrl({
        action: 'read',
        expires: '03-01-2500'
      });
      
      return {
        success: true,
        filePath,
        downloadUrl: url,
        message: 'PDF generated and stored successfully'
      };
    } catch (storageError) {
      logger.error('Storage error:', storageError);
      throw new functions.https.HttpsError(
        'internal',
        `Storage error: ${storageError.message}`
      );
    }
  } catch (error) {
    logger.error('PDF generation error:', error);
    throw new functions.https.HttpsError(
      'internal',
      `Failed to generate PDF: ${error.message}`
    );
  }
}); 