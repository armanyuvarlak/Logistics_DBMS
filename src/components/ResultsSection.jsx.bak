import React, { useState } from 'react'
import { generateOfferPdf } from '../firebase/pdfUtils'
import { useLocation, useNavigate } from 'react-router-dom'

const ResultsSection = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { rows: initialRows, calculationType, chargeableWeight } = location.state || {};
  const [isGenerating, setIsGenerating] = useState(false);

  // Function to determine service text based on service type and row index
  const getServiceText = (index, term) => {
    if (index === 2) return ''; // Third row is always empty
    if (term.startsWith('D') && index === 0) return 'Pick Up';
    if (term.endsWith('D') && index === 1) return 'Delivery';
    return '';
  };

  // Create default empty data structure if needed
  const rows = initialRows || [
    { pieces: '', weight: '', length: '', width: '', height: '', volume: '', stackable: '' },
    { pieces: '', weight: '', length: '', width: '', height: '', volume: '', stackable: '' },
    { pieces: '', weight: '', length: '', width: '', height: '', volume: '', stackable: '' }
  ];
  
  // Local state for zip codes and dropdown values (single set for both options)
  const [originZip, setOriginZip] = useState('')
  const [destinationZip, setDestinationZip] = useState('')
  
  // State for dropdown values
  const [option1Branch, setOption1Branch] = useState('MG')
  const [option1Term, setOption1Term] = useState('P2P')
  const [option1VolumeRatio, setOption1VolumeRatio] = useState('1:3')
  
  const [option2Branch, setOption2Branch] = useState('MG')
  const [option2Term, setOption2Term] = useState('P2P')
  const [option2VolumeRatio, setOption2VolumeRatio] = useState('1:3')
  
  // Handler for apply button 
  const handleApplyZipCodes = () => {
    console.log('Apply button clicked:', { originZip, destinationZip })
    // This function will be implemented later
  }
  
  // Handler for prepare offer buttons
  const handlePrepareOffer = async (option) => {
    setIsGenerating(true);
    try {
      const branch = option === 1 ? option1Branch : option2Branch;
      const term = option === 1 ? option1Term : option2Term;
      const volumeRatio = option === 1 ? option1VolumeRatio : option2VolumeRatio;
      
      const offerData = {
        type: calculationType === 'single-quick' ? 'Single Offer (Quick)' : 'Single Offer',
        option: option,
        origin: originZip || 'Not specified',
        destination: destinationZip || 'Not specified',
        branch: branch,
        volumeRatio: volumeRatio,
        term: term,
        service: term, // Using term as the service type now
        chargeableWeight: chargeableWeight,
        rows: rows,
        ftlValue: option === 1 ? '1,250 €' : '1,425 €',
        timestamp: new Date().toISOString()
      };
      
      const filename = `single-offer-${originZip || 'unknown'}-${destinationZip || 'unknown'}-option${option}-${Date.now()}`;
      const result = await generateOfferPdf(offerData, filename, 'offers/single');
      
      if (result.success) {
        alert(`PDF Generated Successfully! It will open in a new tab.`);
        window.open(result.downloadUrl, '_blank');
      } else {
        alert('Failed to generate PDF. Please try again.');
      }
    } catch (error) {
      console.error('PDF generation error:', error);
      alert(`Error generating PDF: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      {/* Add CSS to remove spinner buttons from number inputs */}
      <style jsx="true">{`
        /* Remove number input spinners for Webkit browsers (Chrome, Safari, Edge) */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
        
        /* Remove number input spinners for Firefox */
        input[type=number] {
          -moz-appearance: textfield;
        }
      `}</style>
      
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">
            {calculationType === 'single-quick' ? 'Calculation Results (Quick Entry)' : 'Calculation Results'}
          </h2>
          {calculationType === 'single-quick' && (
            <p className="text-sm text-gray-600 mt-1">Calculation based on chargeable weight: {chargeableWeight} kg</p>
          )}
        </div>
        <div className="card-body">
          {/* Origin and Destination Zip Code fields (common for both options) */}
          <div className="mb-8">
            <div className="flex flex-wrap -mx-3">
              <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                <label className="block text-[var(--text-dark)] text-sm font-medium mb-2" htmlFor="origin-zip">
                  Origin Zip
                </label>
                <input
                  className="w-full px-4 py-2 border border-gray-300 rounded bg-white"
                  id="origin-zip"
                  type="text"
                  placeholder="Enter origin zip"
                  value={originZip}
                  onChange={(e) => setOriginZip(e.target.value)}
                />
              </div>
              <div className="w-full md:w-1/2 px-3">
                <label className="block text-[var(--text-dark)] text-sm font-medium mb-2" htmlFor="destination-zip">
                  Destination Zip
                </label>
                <div className="flex items-center">
                  <input
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-l bg-white"
                    id="destination-zip"
                    type="text"
                    placeholder="Enter destination zip"
                    value={destinationZip}
                    onChange={(e) => setDestinationZip(e.target.value)}
                  />
                  <button 
                    className="bg-[var(--primary-color)] text-white px-4 py-2 rounded-r hover:bg-[var(--primary-color-hover)] transition-colors font-medium shadow-sm"
                    onClick={handleApplyZipCodes}
                  >
                    Apply
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div className="flex flex-wrap gap-[30px] justify-between w-full max-w-[1400px]">
            {/* First Result Table */}
            <div className="flex-1 basis-[45%] max-w-full">
              <h3 className="text-lg font-semibold mb-4 text-[var(--text-dark)] border-b pb-2">Option 1</h3>
              
              {/* Dropdowns Row */}
              <div className="flex gap-3 mb-4">
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Term</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option1Branch}
                    onChange={(e) => setOption1Branch(e.target.value)}
                  >
                    <option value="MG">MG</option>
                    <option value="GNS">GNS</option>
                  </select>
                </div>
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Service</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option1Term}
                    onChange={(e) => setOption1Term(e.target.value)}
                  >
                    <option value="P2P">Port to Port (P2P)</option>
                    <option value="P2D">Port to Door (P2D)</option>
                    <option value="D2P">Door to Port (D2P)</option>
                    <option value="D2D">Door to Door (D2D)</option>
                  </select>
                </div>
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Volume Ratio</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option1VolumeRatio}
                    onChange={(e) => setOption1VolumeRatio(e.target.value)}
                  >
                    <option value="1:3">1:3</option>
                    <option value="1:6">1:6</option>
                  </select>
                </div>
              </div>
              
              <div className="overflow-hidden rounded border border-gray-200">
                <table className="business-table w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="text-center border border-gray-200 p-3">Branch</th>
                      <th className="text-center border border-gray-200 p-3">Zone</th>
                      <th className="text-center border border-gray-200 p-3">Term</th>
                      <th className="text-center border border-gray-200 p-3">Service</th>
                      <th className="text-center border border-gray-200 p-3">Euro in Total</th>
                      <th className="text-center border border-gray-200 p-3">Ftl</th>
                    </tr>
                  </thead>
                  <tbody>
                    {/* First Row */}
                    <tr className="bg-white hover:bg-gray-50">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">1</td>
                      <td className="text-center border border-gray-200 p-3">{option1Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-blue-700">{getServiceText(0, option1Term) || 'Express'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">450 €</td>
                      <td rowSpan="3" className="align-middle text-center font-bold bg-gray-50 border border-gray-200 p-3">
                        <div className="flex justify-center items-center h-full">
                          <span className="inline-block text-lg">1,250 €</span>
                        </div>
                      </td>
                    </tr>
                    {/* Second Row */}
                    <tr className="bg-gray-50 hover:bg-gray-100">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">2</td>
                      <td className="text-center border border-gray-200 p-3">{option1Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-green-700">{getServiceText(1, option1Term) || 'Economy'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">350 €</td>
                    </tr>
                    {/* Third Row */}
                    <tr className="bg-white hover:bg-gray-50">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">3</td>
                      <td className="text-center border border-gray-200 p-3">{option1Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-purple-700">{getServiceText(2, option1Term) || 'Standard'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">200 €</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>

            {/* Second Result Table */}
            <div className="flex-1 basis-[45%] max-w-full">
              <h3 className="text-lg font-semibold mb-4 text-[var(--text-dark)] border-b pb-2">Option 2</h3>
              
              {/* Dropdowns Row */}
              <div className="flex gap-3 mb-4">
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Term</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option2Branch}
                    onChange={(e) => setOption2Branch(e.target.value)}
                  >
                    <option value="MG">MG</option>
                    <option value="GNS">GNS</option>
                  </select>
                </div>
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Service</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option2Term}
                    onChange={(e) => setOption2Term(e.target.value)}
                  >
                    <option value="P2P">Port to Port (P2P)</option>
                    <option value="P2D">Port to Door (P2D)</option>
                    <option value="D2P">Door to Port (D2P)</option>
                    <option value="D2D">Door to Door (D2D)</option>
                  </select>
                </div>
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Volume Ratio</label>
                  <select 
                    className="w-full px-3 py-2 border border-gray-300 rounded bg-white text-center"
                    value={option2VolumeRatio}
                    onChange={(e) => setOption2VolumeRatio(e.target.value)}
                  >
                    <option value="1:3">1:3</option>
                    <option value="1:6">1:6</option>
                  </select>
                </div>
              </div>
              
              <div className="overflow-hidden rounded border border-gray-200">
                <table className="business-table w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="text-center border border-gray-200 p-3">Branch</th>
                      <th className="text-center border border-gray-200 p-3">Zone</th>
                      <th className="text-center border border-gray-200 p-3">Term</th>
                      <th className="text-center border border-gray-200 p-3">Service</th>
                      <th className="text-center border border-gray-200 p-3">Euro in Total</th>
                      <th className="text-center border border-gray-200 p-3">Ftl</th>
                    </tr>
                  </thead>
                  <tbody>
                    {/* First Row */}
                    <tr className="bg-white hover:bg-gray-50">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">1</td>
                      <td className="text-center border border-gray-200 p-3">{option2Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-blue-700">{getServiceText(0, option2Term) || 'Express'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">525 €</td>
                      <td rowSpan="3" className="align-middle text-center font-bold bg-gray-50 border border-gray-200 p-3">
                        <div className="flex justify-center items-center h-full">
                          <span className="inline-block text-lg">1,425 €</span>
                        </div>
                      </td>
                    </tr>
                    {/* Second Row */}
                    <tr className="bg-gray-50 hover:bg-gray-100">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">2</td>
                      <td className="text-center border border-gray-200 p-3">{option2Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-green-700">{getServiceText(1, option2Term) || 'Economy'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">400 €</td>
                    </tr>
                    {/* Third Row */}
                    <tr className="bg-white hover:bg-gray-50">
                      <td className="text-center border border-gray-200 p-3">MG</td>
                      <td className="text-center border border-gray-200 p-3">3</td>
                      <td className="text-center border border-gray-200 p-3">{option2Branch}</td>
                      <td className="text-center border border-gray-200 p-3 font-medium text-purple-700">{getServiceText(2, option2Term) || 'Standard'}</td>
                      <td className="text-center border border-gray-200 p-3 font-semibold">250 €</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default ResultsSection 